apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: openshift-console
  name: downloads
spec:
  replicas: 2
  selector:
    matchLabels:
      app: console
      component: downloads
  template:
    metadata:
      name: downloads
      labels:
        app: console
        component: downloads
    spec:
      nodeSelector:
        kubernetes.io/os: "linux"
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: "NoSchedule"
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 120
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 120
      containers:
      - name: download-server
        terminationMessagePolicy: FallbackToLogsOnError
        image: registry.svc.ci.openshift.org/openshift:cli-artifacts
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
        command: ["/bin/sh"]
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        args:
        - '-c'
        - |
          cat <<EOF >>/tmp/serve.py
          from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
          from SocketServer import ThreadingMixIn
          import SimpleHTTPServer, os, re, signal, sys, tarfile, tempfile, zipfile
          
          class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
              pass

          signal.signal(signal.SIGTERM, lambda signum, frame: sys.exit(0))
          
          temp_dir = tempfile.mkdtemp()
          print('serving from {}'.format(temp_dir))
          os.chdir(temp_dir)
          for arch in ['amd64']:
              os.mkdir(arch)
              for operating_system in ['linux', 'mac', 'windows']:
                  os.mkdir(os.path.join(arch, operating_system))
          for arch, operating_system, path in [
                  ('amd64', 'linux', '/usr/bin/oc'),
                  ('amd64', 'mac', '/usr/share/openshift/mac/oc'),
                  ('amd64', 'windows', '/usr/share/openshift/windows/oc.exe'),
                  ]:
              basename = os.path.basename(path)
              target_path = os.path.join(arch, operating_system, basename)
              os.symlink(path, target_path)
              base_root, _ = os.path.splitext(basename)
              archive_path_root = os.path.join(arch, operating_system, base_root)
              with tarfile.open('{}.tar'.format(archive_path_root), 'w') as tar:
                  tar.add(path, basename)
              with zipfile.ZipFile('{}.zip'.format(archive_path_root), 'w') as zip:
                  zip.write(path, basename)
          
          addr = ('', 8080)
          server = ThreadedHTTPServer(addr, SimpleHTTPServer.SimpleHTTPRequestHandler)
          server.serve_forever()
          EOF
          exec python2 /tmp/serve.py  # the cli image only has Python 2.7
      terminationGracePeriodSeconds: 1
